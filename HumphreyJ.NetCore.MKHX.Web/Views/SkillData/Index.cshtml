@model IEnumerable<IGrouping<string, HumphreyJ.NetCore.MKHX.GameData.ParsedSkillData>>

@{
    ViewBag.Title = "技能列表";

    var AffectTypeContent = HumphreyJ.NetCore.MKHX.Web.Controllers.SkillDataController.AffectTypeContent;

    var LanchCondition = new Dictionary<int, string> {
{0,"无条件或交由技能判定" },
{1,"目标符合参数指定种族" },
{2,"造成物理伤害值大于0" },
{3,"受到物理伤害值大于0" },
{4,"目标卡牌生命值高于自身" },
{5,"目标卡牌附有燃烧、毒、冻结、麻痹效果" },
};

    var LanchType = new Dictionary<int, string> {
{0,"不限或交由技能判定" },
{1,"物理攻击前" },
{2,"对卡牌造成物理伤害后" },
{3,"受到物理伤害后" },
{4,"卡牌技能发动阶段" },
{5,"受到物理伤害前" },
{6,"卡牌在场期间" },
{7,"卡牌行动结束后" },
{8,"进入墓地后" },
{9,"进入墓地前" },
{10,"卡牌上场后" },
{11,"受到魔法伤害前" },
{12,"受到“摧毁”、“送还”、“传送”技能影响前" },
{13,"受到魔法效果前" },
{14,"英雄受到伤害前" },
{15,"符文技能发动阶段" },
{16,"卡牌从手牌上场后，或卡牌从墓地复活后的技能发动阶段" },
{17,"符文技能发动阶段前" },
{18,"自身卡牌受到伤害时" },
{19,"我方回合开始时" },
{20,"敌方卡牌发动物理攻击前" },
{21,"卡牌位于等待区时" },
{22,"22" },
};

    var SkillCategory = new Dictionary<int, string> {
{0,"未知" },
{1,"攻击技能" },
{2,"魔法技能" },
{3,"防守技能" },
{4,"回复技能" },
{5,"辅助技能" },
};
}

<style>
    .btn-outline-secondary { color: #999; background-color: transparent; background-image: none; border-color: #999; }
    .mkhx-skill-list { margin: auto; }
        .mkhx-skill-list .btn { float: left; }
            .mkhx-skill-list .btn span { width: 7em; display: inline-block; text-align: left; }
</style>

<header class="py-3">
    <div class="container">
        <h5 class="d-none d-md-block pb-3">@ViewBag.Title</h5>
        <form class="border border-secondary p-0" method="get" action="/skilldata">
            <h6 class="p-3 bg-dark text-center">排序与筛选</h6>
            <div class="px-1 py-0 pb-2">
                <div class="d-inline-block my-2 px-3 py-2">
                    <div class="custom-control custom-radio mr-4 d-inline-block">
                        <input type="radio" id="type_battleskill" name="type" value="battleskill" class="custom-control-input" checked="checked" />
                        <label class="custom-control-label" for="type_battleskill">战斗技能</label>
                    </div>
                    <div class="custom-control custom-radio mr-4 d-inline-block">
                        <input type="radio" id="type_multipleskill" name="type" value="multipleskill" class="custom-control-input" />
                        <label class="custom-control-label" for="type_multipleskill">多重技能</label>
                    </div>
                    <div class="custom-control custom-radio mr-4 d-inline-block">
                        <input type="radio" id="type_materialskill" name="type" value="materialskill" class="custom-control-input" />
                        <label class="custom-control-label" for="type_materialskill">生活技能</label>
                    </div>
                    <div class="custom-control custom-radio mr-4 d-inline-block">
                        <input type="radio" id="type_all" name="type" value="all" class="custom-control-input" />
                        <label class="custom-control-label" for="type_all">所有技能</label>
                    </div>
                </div>
                <div class="d-inline-block my-2 px-3 py-2">
                    <div class="custom-control custom-checkbox mr-4 d-inline-block">
                        <input type="checkbox" id="skillCategory_1" name="skillCategory" value="1" class="custom-control-input" />
                        <label class="custom-control-label text-info" for="skillCategory_1">攻击技能</label>
                    </div>
                    <div class="custom-control custom-checkbox mr-4 d-inline-block">
                        <input type="checkbox" id="skillCategory_2" name="skillCategory" value="2" class="custom-control-input" />
                        <label class="custom-control-label text-danger" for="skillCategory_2">魔法技能</label>
                    </div>
                    <div class="custom-control custom-checkbox mr-4 d-inline-block">
                        <input type="checkbox" id="skillCategory_3" name="skillCategory" value="3" class="custom-control-input" />
                        <label class="custom-control-label text-primary" for="skillCategory_3">防守技能</label>
                    </div>
                    <div class="custom-control custom-checkbox mr-4 d-inline-block">
                        <input type="checkbox" id="skillCategory_4" name="skillCategory" value="4" class="custom-control-input" />
                        <label class="custom-control-label text-success" for="skillCategory_4">回复技能</label>
                    </div>
                    <div class="custom-control custom-checkbox mr-4 d-inline-block">
                        <input type="checkbox" id="skillCategory_5" name="skillCategory" value="5" class="custom-control-input" />
                        <label class="custom-control-label text-warning" for="skillCategory_5">辅助技能</label>
                    </div>
                </div>
                <div class="d-inline-block my-2 px-3 py-0">
                    <div class="form-inline">
                        按
                        <select class="form-control bg-dark text-white form-inline px-1" name="orderby" style="width:8em">
                            <option value="id">编号</option>
                            <option value="name">名称</option>
                            <option value="reversename">反转名称</option>
                            <option value="skillcategory">类型</option>
                            <option value="affecttype">技能逻辑</option>
                            <option value="lanchtype">触发时间点</option>
                            <option value="lanchcondition">触发条件</option>
                        </select>
                        <select class="form-control bg-dark text-white form-inline px-1" name="desc" style="width:4.25em">
                            <option value="0">顺序</option>
                            <option value="1">倒序</option>
                        </select>
                        排列
                    </div>
                </div>
                <div class="clearfix my-2 px-3 py-0 text-center">
                    <button type="submit" class="btn btn-sm btn-primary px-3">确认</button>
                    <button type="reset" class="btn btn-sm btn-secondary px-3">恢复</button>
                </div>
            </div>
        </form>
    </div>
</header>

<script>
    (function () {
        var s = (window.location.search || '?').split('?')[1].split('&');
        var q = {};

        for (var i in s) {
            var a = s[i].split('=');
            q[a[0]] ? (q[a[0]].push(a[1])) : (q[a[0]] = [a[1]]);
        }

        for (var i in q) {
            var k = i || 'null';
            for (var j in q[i]) {
                var v = q[i][j];
                $('input[name=' + k + '][value=' + v + ']').attr('checked', 'checked');
                $('select[name=' + k + ']').val(v);
            }
        }

        var countskillCategory = 0;
        $('input[name=skillCategory]').each(function (i, e) {
            countskillCategory += e.checked;
        });
        countskillCategory || $('input[name=skillCategory]').attr('checked', 'checked');

    })();
</script>

<main>
    <div class="container">
        @switch (ViewData["orderby"])
        {
            default:
                {
                    <div class="mkhx-skill-list-wrapper">
                        <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                            @foreach (var i in Model)
                            {
                                @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                            }
                        </div>
                    </div>
                    break;
                }
            case "name":
                {
                    var groups = Model.GroupBy(m => PinyinHelper.GetPinyinAbbreviation(m.Key.First()));
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@((group.Key == '#' ? "#" : "拼音 " + group.Key).ToUpper())</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in group)
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
            case "reversename":
                {
                    var groups = Model.GroupBy(m => PinyinHelper.GetPinyinAbbreviation(m.Key.Last()));
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@((group.Key == '#' ? "#" : "拼音 " + group.Key).ToUpper())</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in group)
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
            case "skillcategory":
                {
                    var groups = Model.GroupBy(m => m.First().SkillCategory);
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@(SkillCategory[group.Key])</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in Model.Where(m => m.Count(n => n.SkillCategory == group.Key) > 0))
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
            case "affecttype":
                {
                    var groups = Model.GroupBy(m => m.First().AffectType);
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@(group.Key) - @(AffectTypeContent[group.Key].Name)</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in Model.Where(m => m.Count(n => n.AffectType == group.Key) > 0))
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
            case "lanchtype":
                {
                    var groups = Model.GroupBy(m => m.First().LanchType);
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@(group.Key) - @(LanchType[group.Key])</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in Model.Where(m => m.Count(n => n.LanchType == group.Key) > 0))
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
            case "lanchcondition":
                {
                    var groups = Model.GroupBy(m => m.First().LanchCondition);
                    foreach (var group in groups)
                    {
                        <div class="mkhx-skill-list-wrapper">
                            <h5 class="border-bottom border-dark mt-3 p-3 px-5">@(group.Key) - @(LanchCondition[group.Key])</h5>
                            <div class="mkhx-skill-list pl-0 pl-sm-3 pl-lg-5 clearfix">
                                @foreach (var i in Model.Where(m => m.Count(n => n.LanchCondition == group.Key) > 0))
                                {
                                    @Html.Partial("~/Views/Shared/partial/SkillAbbr.cshtml", i)
                                }
                            </div>
                        </div>
                    }
                    break;
                }
        }
    </div>
</main>
